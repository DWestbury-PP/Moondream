# Moondream Vision Pipeline - Docker Compose Configuration
# 
# HYBRID ARCHITECTURE:
# - Redis, API, Frontend, Fusion: Run in Docker containers
# - Camera, YOLO, Moondream: Run natively on Apple Silicon for GPU access
#
# For Apple Silicon development:
#   Use: ./scripts/start-all.sh (manages both containers and native services)
#
# For other architectures (Jetson Nano, Thor, etc.):
#   1. Uncomment the camera, yolo, and moondream services below
#   2. Uncomment their dependencies in the fusion service
#   3. Use: docker-compose up --build
#
# Note: This compose file requires DOCKER_BUILDKIT=0 to properly resolve local base images

services:
  # Redis message bus
  redis:
    image: redis:7-alpine
    container_name: moondream-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - moondream-network

  # Camera capture service
  # NOTE: Commented out for Apple Silicon development - runs natively for GPU access
  # Uncomment for other architectures (Jetson Nano, Thor, etc.)
  # camera:
  #   build:
  #     context: .
  #     dockerfile: containers/camera/Dockerfile.fast
  #   container_name: moondream-camera
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - CAMERA_TYPE=mac_studio
  #     - CAMERA_INDEX=0
  #     - LOG_LEVEL=INFO
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   networks:
  #     - moondream-network
  #   # For camera access on macOS
  #   privileged: true
  #   volumes:
  #     - /dev:/dev

  # YOLO object detection service
  # NOTE: Commented out for Apple Silicon development - runs natively for GPU access
  # Uncomment for other architectures (Jetson Nano, Thor, etc.)
  # yolo:
  #   build:
  #     context: .
  #     dockerfile: containers/yolo/Dockerfile.fast
  #   container_name: moondream-yolo
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - YOLO_MODEL=yolo11n.pt
  #     - YOLO_DEVICE=mps
  #     - LOG_LEVEL=INFO
  #   volumes:
  #     - ./models/yolo:/app/models/yolo
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   networks:
  #     - moondream-network

  # Moondream VLM service
  # NOTE: Commented out for Apple Silicon development - runs natively for GPU access
  # Uncomment for other architectures (Jetson Nano, Thor, etc.)
  # moondream:
  #   build:
  #     context: .
  #     dockerfile: containers/moondream/Dockerfile.fast
  #   container_name: moondream-vlm
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - MOONDREAM_MODEL=vikhyatk/moondream2
  #     - MOONDREAM_DEVICE=mps
  #     - VLM_FRAME_STRIDE=10
  #     - LOG_LEVEL=INFO
  #   # volumes:
  #   #   - moondream_cache:/home/appuser/.cache/huggingface
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   networks:
  #     - moondream-network

  # Fusion service
  fusion:
    build:
      context: .
      dockerfile: containers/fusion/Dockerfile.fast
    container_name: moondream-fusion
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      # NOTE: yolo and moondream dependencies removed - they run natively on Apple Silicon
      # For other architectures, uncomment these dependencies:
      # yolo:
      #   condition: service_started
      # moondream:
      #   condition: service_started
    restart: unless-stopped
    networks:
      - moondream-network

  # API service
  api:
    build:
      context: .
      dockerfile: containers/api/Dockerfile.fast
    container_name: moondream-api
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - WEBSOCKET_PORT=8001
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - moondream-network

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: containers/frontend/Dockerfile
    container_name: moondream-frontend
    ports:
      - "3000:80"
    environment:
      - API_BASE_URL=http://localhost:8000
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - moondream-network

volumes:
  redis_data:
  moondream_cache:

networks:
  moondream-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
